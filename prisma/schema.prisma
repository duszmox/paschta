// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    relationMode = "prisma"
    url          = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    room          Int?
    accounts      Account[]
    sessions      Session[]
    news          News[]
    Order         Order[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model News {
    id          String   @id @default(cuid())
    title       String
    description String
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([userId])
}

model Food {
    id           String         @id @default(cuid())
    name         String
    description  String
    price        Int            @default(1500)
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    Order        Order[]
    OpeningFoods OpeningFoods[]
}

model Opening {
    id           String         @id @default(cuid())
    title        String
    description  String
    open         DateTime
    close        DateTime
    acceping     Boolean
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    OpeningFoods OpeningFoods[]
}

model OpeningFoods {
    id        String   @id @default(cuid())
    opening   Opening  @relation(fields: [openingId], references: [id])
    openingId String
    food      Food     @relation(fields: [foodId], references: [id])
    foodId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([openingId])
    @@index([foodId])
}

model Order {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    food      Food     @relation(fields: [foodId], references: [id])
    foodId    String
    time      DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([foodId])
}
